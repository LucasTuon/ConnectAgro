name: CI/CD Backend ConnectAgro API

on:
  # Roda quando há um 'push' para o branch principal
  push:
    branches: [ main ]
    paths:
      - 'backend/**' # Caminho para a pasta que tera o back
      - 'pubspec.yaml' 
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch: 

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    
    # === FASE DE INTEGRAÇÃO CONTÍNUA (CI) ===
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Dart Environment
        uses: dart-lang/setup-dart@v1
        with:
          # MUDAR a versão do flutter
          flutter-version: '3.0.0' 

      - name: Install Dependencies
        run: |
          cd backend # Navega para a pasta do Back-end
          dart pub get
          
      - name: Analyze Code Quality 
        run: |
          cd backend
          dart analyze
        
      - name: Run Critical Tests
        run: |
          cd backend
          dart test
          

    # === FASE DE ENTREGA CONTÍNUA (CD) Container ===
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Local do docker
          push: true
          tags: seu-usuario/connectagro-api:latest 

      # === FASE DE ENTREGA CONTÍNUA (CD) Implantação ===

      - name: Deploy to Production Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          
          script: |
            echo "Iniciando deploy da nova versão ConnectAgro API..."
            
            # 1. Puxar a nova imagem
            docker pull seu-usuario/connectagro-api:latest
            
            # 2. Parar e remover o container antigo
            docker stop connectagro-api-live || true
            docker rm connectagro-api-live || true
            
            # 3. Executar o novo container
            docker run -d --name connectagro-api-live -p 8080:8080 seu-usuario/connectagro-api:latest
            
            # 4. Rodar as migrações de Banco de Dados 
            docker exec connectagro-api-live /app/run_db_migrations.sh
            
            echo "Deploy concluído com sucesso!"
